% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GPD_NN.R
\name{GPD.NN}
\alias{GPD.NN}
\alias{GPD.NN.train}
\alias{GPD.NN.predict}
\title{GPD PINN}
\usage{
GPD.NN.train(Y_train, Y_valid = NULL, X_train, u_train = NULL,
  type = "MLP", link = "identity", tau = NULL, n.ep = 100,
  batch.size = 100, init.scale = NULL, init.xi = NULL, widths = c(6,
  3), filter.dim = c(3, 3), seed = NULL, init.wb_path = NULL)

GPD.NN.predict(X_train, u_train, model)
}
\arguments{
\item{Y_train, Y_valid}{a 2 or 3 dimensional array of training or validation real response values.
Missing values can be handled by setting corresponding entries to \code{Y_train} or \code{Y_valid} to \code{-1e5}.
The first dimension should be the observation indices, e.g., time.

If \code{type=="CNN"}, then \code{Y_train} and \code{Y_valid} must have three dimensions with the latter two corresponding to an \eqn{M} by \eqn{N} regular grid of spatial locations.
If \code{Y_valid==NULL}, no validation loss will be computed and the returned model will be that which minimises the training loss over \code{n.ep} epochs.}

\item{u_train}{an array with the same dimension as \code{Y_train}. Gives the threshold used to create exceedances of \code{Y_train}, see below. Note that \code{u_train} is applied to both \code{Y_train} and \code{Y_valid}.}

\item{type}{string defining the type of network to be built. If \code{type=="MLP"}, the network will have all densely connected layers; if \code{type=="CNN"},
the network will have all convolutional layers. Defaults to an MLP. (Currently the same network is used for all parameters, may change in future versions)}

\item{n.ep}{number of epochs used for training. Defaults to 1000.}

\item{batch.size}{batch size for stochastic gradient descent. If larger than \code{dim(Y_train)[1]}, i.e., the number of observations, then regular gradient descent used.}

\item{init.scale, init.xi}{sets the initial \eqn{sigma} and \eqn{\xi\in(0,1)} estimates across all dimensions of \code{Y_train}. Overridden by \code{init.wb_path} if \code{!is.null(init.wb_path)}, but otherwise the initial parameters must be supplied.}

\item{widths}{vector of widths/filters for hidden dense/convolution layers. Number of layers is equal to \code{length(widths)}. Defaults to (6,3).}

\item{filter.dim}{if \code{type=="CNN"}, this 2-vector gives the dimensions of the convolution filter kernel; must have odd integer inputs. Note that filter.dim=c(1,1) is equivalent to \code{type=="MLP"}. The same filter is applied for each hidden layer across all parameters with NN predictors.}

\item{seed}{seed for random initial weights and biases.}

\item{init.wb_path}{filepath to a \code{keras} model which is then used as initial weights and biases for training the new model. The original model must have
the exact same architecture and trained with the same input data as the new model. If \code{NULL}, then initial weights and biases are random (with seed \code{seed}) but the
final layer has zero initial weights to ensure that the initial scale and shape estimates are \code{ init.scale} and \code{init.xi}, respectively,  across all dimensions.}

\item{model}{fitted \code{keras} model. Output from \code{GPD.NN.train}.}

\item{X_train_q}{list of arrays corresponding to complementary subsets of the \eqn{d\geq 1} predictors which are used for modelling the location parameter \eqn{q_\alpha}. Must contain at least one of the following three named entries:\describe{
\item{\code{X_train_lin}}{A 3 or 4 dimensional array of "linear" predictor values. One more dimension then \code{Y_train}. If \code{NULL}, a model without the linear component is built and trained.
The first 2/3 dimensions should be equal to that of \code{Y_train}; the last dimension corresponds to the chosen \eqn{l\geq 0} 'linear' predictor values.}
\item{\code{X_train_add_basis}}{A 4 or 5 dimensional array of basis function evaluations for the "additive" predictor values.
The first 2/3 dimensions should be equal to that of \code{Y_train}; the penultimate dimensions corresponds to the chosen \eqn{a\geq 0} 'linear' predictor values and the last dimension is equal to the number of knots used for estimating the splines. See example.
If \code{NULL}, a model without the additive component is built and trained.}
\item{\code{X_train_nn}}{A 3 or 4 dimensional array of "non-additive" predictor values.  If \code{NULL}, a model without the NN component is built and trained; if this is the case, then \code{type} has no effect.
The first 2/3 dimensions should be equal to that of \code{Y_train}; the last dimension corresponds to the chosen \eqn{d-l-a\geq 0} 'non-additive' predictor values.}
}
Note that \code{X_train} is the predictors for both \code{Y_train} and \code{Y_valid}.}
}
\value{
\code{bGEVPP.NN.train} returns the fitted \code{model}.  \code{bGEVPP.NN.predict} is a wrapper for \code{keras::predict} that returns the predicted parameter estimates, and, if applicable, their corresponding linear regression coefficients and spline bases weights.
}
\description{
Build and train a partially-interpretable neural network for fitting a GPD model
}
\details{
{
Consider a real-valued random variable \eqn{Y} and let \eqn{\mathbf{X}} denote a \eqn{d}-dimensional predictor set with observations \eqn{\mathbf{x}}.
For integers \eqn{l\geq 0,a \geq 0} and \eqn{0\leq l+a \leq d}, let \eqn{\mathbf{X}_L, \mathbf{X}_A} and \eqn{\mathbf{X}_N} be distinct sub-vectors of \eqn{\mathbf{X}},
with observations of each component denoted \eqn{\mathbf{x}_L, \mathbf{x}_A} and \eqn{\mathbf{x}_N}, respectively; the lengths of the sub-vectors are \eqn{l,a} and \eqn{d-l-a}, respectively.
For a fixed threshold \eqn{u(\mathbf{x})}, dependent on predictors, we model \eqn{(Y-u(\mathbf{x}))|\mathbf{X}=\mathbf{x}\sim\mbox{GPD}(\sigma(\mathbf{X})),\xi;u(\mathbf{x}))} for \eqn{\xi\in(0,1)} with
\deqn{\sigma (\mathbf{x})=\exp[\eta_0+m_L\{\mathbf{x}_L\}+m_A\{x_A\}+m_N\{\mathbf{x}_N\}]}
where \eqn{\eta_0} is a constant intercept. The unknown functions \eqn{m_L} and
\eqn{m_A} are estimated using linear functions and splines, respectively, and are
both returned as outputs by \code{GPD.NN.predict}; \eqn{m_N} is estimated using a neural network
(currently the same architecture is used for both parameters). Note that \eqn{\xi>0} is fixed across all predictors; this may change in future versions.

The model is fitted by minimising the negative log-likelihood associated with the GPD model over \code{n.ep} training epochs.
Although the model is trained by minimising the loss evaluated for \code{Y_train}, the final returned model may minimise some other loss.
The current state of the model is saved after each epoch, using \code{keras::callback_model_checkpoint}, if the value of some criterion subcedes that of the model from the previous checkpoint; this criterion is the loss evaluated for validation set \code{Y_valid} if \code{!is.null(Y_valid)} and for \code{Y_train}, otherwise.

}
}
\examples{

#Apply model to toy data

# Create  predictors
preds<-rnorm(128000)

#Re-shape to a 4d array. First dimension corresponds to observations,
#last to the different components of the predictor set
dim(preds)=c(200,8,8,10) #We have ten predictors

#Split predictors into linear, additive and nn. 

X_train_nn=preds[,,,1:5] #Five nn predictors 
X_train_lin=preds[,,,6:8] #Three linear predictors 
X_train_add=preds[,,,9:10] #Two additive predictors 


# Create response data

#Contribution to scale parameter
#Linear contribution
m_L = 0.5*X_train_lin[,,,1]+0.3*X_train_lin[,,,2]-0.4*X_train_lin[,,,3]

# Additive contribution
m_A = 0.2*X_train_add[,,,1]^2+0.05*X_train_add[,,,1]-0.1*X_train_add[,,,2]^2+
  0.01*X_train_add[,,,2]^3

#Non-additive contribution - to be estimated by NN
m_N =0.5*(exp(-4+X_train_nn[,,,2]+X_train_nn[,,,3])+
            sin(X_train_nn[,,,1]-X_train_nn[,,,2])*(X_train_nn[,,,1]+X_train_nn[,,,2])-
            cos(X_train_nn[,,,3]-X_train_nn[,,,4])*(X_train_nn[,,,2]+X_train_nn[,,,5]))

sigma=1+4*exp(-3+m_L+m_A+m_N) #Exponential link
xi=0.1 # Set xi

#We simulate data as exceedances above some random positive threshold u. 
u<-apply(sigma,1:3,function(x) rgpd(n=1,loc=0,scale=1,shape=0.1) ) #Random threshold

theta=array(dim=c(dim(sigma),3))
theta[,,,1]=sigma; theta[,,,2]  =xi; theta[,,,3]  =u

#If u were the true 80\% quantile, say,  of the response, then only 20\% of the data should exceed u. 
#We achieve this by simulating a Bernoulli variable to determine if Y exceeds u

Y=apply(theta,1:3,function(x){ 
  if(rbinom(1,1,0.8)==1) rgpd(n=1,loc=x[3],scale=x[1],shape=x[2]) else  runif(1,0,x[3])
}
) #Simulate GPD exceedances above u as given above


#Create training and validation, respectively.
#We mask 20\% of the Y values and use this for validation
#Masked values must be set to -1e5 and are treated as missing whilst training

mask_inds=sample(1:length(Y),size=length(Y)*0.8)

Y_train<-Y_valid<-Y #Create training and validation, respectively.
Y_train[-mask_inds]=-1e5
Y_valid[mask_inds]=-1e5



#To build a model with an additive component, we require an array of evaluations of
#the basis functions for each pre-specified knot and entry to X_train_add_q and X_train_add_s

rad=function(x,c){ #Define a basis function. Here we use the radial bases
  out=abs(x-c)^2*log(abs(x-c))
  out[(x-c)==0]=0
  return(out)
}

n.knot = 5 # set number of knots. Must be the same for each additive predictor

knots=matrix(nrow=dim(X_train_add)[4],ncol=n.knot)

#We set knots to be equally-spaced marginal quantiles
for( i in 1:dim(X_train_add)[4]) knots[i,]=quantile(X_train_add[,,,i],probs=seq(0,1,length=n.knot))

X_train_add_basis<-array(dim=c(dim(X_train_add),n.knot))
for( i in 1:dim(X_train_add)[4]) {
  for(k in 1:n.knot) {
    X_train_add_basis[,,,i,k]= rad(x=X_train_add[,,,i],c=knots[i,k])
    #Evaluate rad at all entries to X_train_add and for all knots
  }}


#lin+GAM+NN models defined for scale parameter
X_train=list("X_train_nn"=X_train_nn, "X_train_lin"=X_train_lin,
             "X_train_add_basis"=X_train_add_basis) 

#We treat u as fixed and known. In an application, u can be estimated using quant.NN.train.

u_train <- u

#Fit the GPD model for exceedances above u_train
model<-GPD.NN.train(Y_train, Y_valid,X_train, u_train, type="MLP",
                    n.ep=500, batch.size=50,init.scale=1, init.xi=0.1,
                    widths=c(6,3),seed=1)
out<-GPD.NN.predict(X_train=X_train,u_train=u_train,model)

print("sigma linear coefficients: "); print(round(out$lin.coeff_sigma,2))

#To save model, run
#model \%>\% save_model_tf("model_GPD")
To load model, run
#model  <- load_model_tf("model_GPD",
#custom_objects=list("GPD_loss"=GPD_loss))


# Plot splines for the additive predictors
n.add.preds=dim(X_train_add)[length(dim(X_train_add))]
par(mfrow=c(1,n.add.preds))
for(i in 1:n.add.preds){
  plt.x=seq(from=min(knots[i,]),to=max(knots[i,]),length=1000)  #Create sequence for x-axis
  
  tmp=matrix(nrow=length(plt.x),ncol=n.knot)
  for(j in 1:n.knot){
    tmp[,j]=rad(plt.x,knots[i,j]) #Evaluate radial basis function of plt.x and all knots
  }
  plt.y=tmp\%*\%out$gam.weights_sigma[i,]
  plot(plt.x,plt.y,type="l",main=paste0("sigma spline: predictor ",i),xlab="x",ylab="f(x)")
  points(knots[i,],rep(mean(plt.y),n.knot),col="red",pch=2)
  #Adds red triangles that denote knot locations
  
}

}
\references{
Coles, S. (2001), \emph{An Introduction to Statistical Modeling of Extreme Values}, Springer Series in Statistics.
(\href{https://doi.org/10.1007\%2F978-1-4471-3675-0}{doi})

Richards, J. and Huser, R. (2022), \emph{A unifying partially-interpretable framework for neural network-based extreme quantile regression.}
}
