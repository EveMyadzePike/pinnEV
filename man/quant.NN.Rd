% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/quant_NN.R
\name{quant.NN}
\alias{quant.NN}
\alias{quant.NN.train}
\alias{quant.NN.predict}
\title{Non-parametric single quantile regression PINN}
\usage{
quant.NN.train(Y_train, Y_valid = NULL, X_train, type = "MLP",
  link = "identity", tau = NULL, n.ep = 100, batch.size = 100,
  init.q = NULL, widths = c(6, 3), filter.dim = c(3, 3), seed = NULL,
  init.wb_path = NULL)

quant.NN.predict(X_train, model)
}
\arguments{
\item{Y_train, Y_valid}{a 2 or 3 dimensional array of training or validation real response values.
Missing values can be handled by setting corresponding entries to \code{Y_train} or \code{Y_valid} to \code{-1e5}.
The first dimension should be the observation indices, e.g., time.

If \code{type=="CNN"}, then \code{Y_train} and \code{Y_valid} must have three dimensions with the latter two corresponding to an \eqn{M} by \eqn{N} regular grid of spatial locations.
If \code{Y_valid==NULL}, no validation loss will be computed and the returned model will be that which minimises the training loss over \code{n.ep} epochs.}

\item{X_train}{list of arrays corresponding to complementary subsets of the \eqn{d\geq 1} predictors which are used for modelling. Must contain at least one of the following three named entries:\describe{
\item{\code{X_train_lin}}{A 3 or 4 dimensional array of "linear" predictor values. One more dimension than \code{Y_train}. If \code{NULL}, a model without the linear component is built and trained.
The first 2/3 dimensions should be equal to that of \code{Y_train}; the last dimension corresponds to the chosen \eqn{l\geq 0} 'linear' predictor values.}
\item{\code{X_train_add_basis}}{A 4 or 5 dimensional array of basis function evaluations for the "additive" predictor values.
The first 2/3 dimensions should be equal to that of \code{Y_train}; the penultimate dimensions corresponds to the chosen \eqn{a\geq 0} 'linear' predictor values and the last dimension is equal to the number of knots used for estimating the splines. See example.
If \code{NULL}, a model without the additive component is built and trained.}
\item{\code{X_train_nn}}{A 3 or 4 dimensional array of "non-additive" predictor values.  If \code{NULL}, a model without the NN component is built and trained; if this is the case, then \code{type} has no efect.
The first 2/3 dimensions should be equal to that of \code{Y_train}; the last dimension corresponds to the chosen \eqn{d-l-a\geq 0} 'non-additive' predictor values.}
}
Note that \code{X_train} is the predictors for both \code{Y_train} and \code{Y_valid}.}

\item{type}{string defining the type of network to be built. If \code{type=="MLP"}, the network will have all densely connected layers; if \code{type=="CNN"}, the network will have all convolutional layers. Defaults to an MLP.}

\item{link}{string defining the link function used, see \eqn{h} below. If \code{link=="exp"}, then \eqn{h=\exp(x)}; if \code{link=="identity"}, then \eqn{h(x)=x}.}

\item{tau}{quantile level. Must satisfy \code{0 < tau < 1}.}

\item{n.ep}{number of epochs used for training. Defaults to 1000.}

\item{batch.size}{batch size for stochastic gradient descent. If larger than \code{dim(Y_train)[1]}, i.e., the number of observations, then regular gradient descent used.}

\item{init.q}{sets the initial \code{tau}-quantile estimate across all dimensions of \code{Y_train}. Defaults to empirical estimate. Overriden by \code{init.wb_path} if \code{!is.null(init.wb_path)}.}

\item{widths}{vector of widths/filters for hidden dense/convolution layers. Number of layers is equal to \code{length(widths)}. Defaults to (6,3).}

\item{filter.dim}{if \code{type=="CNN"}, this 2-vector gives the dimensions of the convolution filter kernel; must have odd integer inputs. Note that filter.dim=c(1,1) is equivalent to \code{type=="MLP"}. The same filter is applied for each hidden layer.}

\item{seed}{seed for random initial weights and biases.}

\item{init.wb_path}{filepath to a \code{keras} model which is then used as initial weights and biases for training the new model. The original model must have
the exact same architecture and trained with the same input data as the new model. If \code{NULL}, then initial weights and biases are random (with seed \code{seed}) but the
final layer has zero initial weights to ensure that the initial quantile estimate is \code{init.q} across all dimensions.}

\item{model}{fitted \code{keras} model. Output from \code{quant.NN.train}.}
}
\value{
\code{quant.NN.train} returns the fitted \code{model}.  \code{quant.NN.predict} is a wrapper for \code{keras::predict} that returns the predicted \code{tau}-quantile estimates, and, if applicable, the linear regression coefficients and spline bases weights.
}
\description{
Build and train a partially-interpretable neural network for non-parametric single quantile regression
}
\details{
{
Consider a real-valued random variable \eqn{Y} and let \eqn{\mathbf{X}} denote a \eqn{d}-dimensional predictor set with observations \eqn{\mathbf{x}}.
For integers \eqn{l\geq 0,a \geq 0} and \eqn{0\leq l+a \leq d}, let \eqn{\mathbf{X}_L, \mathbf{X}_A} and \eqn{\mathbf{X}_N} be distinct sub-vectors of \eqn{\mathbf{X}}, with observations of each component denoted \eqn{\mathbf{x}_L, \mathbf{x}_A} and \eqn{\mathbf{x}_N}, respectively; the lengths of the sub-vectors are \eqn{l,a} and \eqn{d-l-a}, respectively.
We model \eqn{\Pr \{ Y \leq y_\tau (\mathbf{x}) |\mathbf{X}=\mathbf{x}\}=\tau} with
\deqn{y_\tau (\mathbf{x})=h[\eta_0+m_L\{\mathbf{x}_L\}+m_A\{x_A\}+m_N\{\mathbf{x}_N\}],} where \eqn{h} is some link-function and \eqn{\eta_0} is a
constant intercept. The unknown functions \eqn{m_L} and \eqn{m_A} are estimated using a linear function and spline, respectively, and are
both returned as outputs by \code{quant.NN.predict}; \eqn{m_N} is estimated using a neural network.

The model is fitted by minimising the tiled loss over \code{n.ep} training epochs; the loss is given by
\deqn{l(y_\tau; y)=\max\{\tau(y-y_\tau),(\tau-1)(y-y_\tau)\}} and is averaged over all entries to \code{Y_train} (or \code{Y_valid}).
Although the model is trained by minimising the loss evaluated for \code{Y_train}, the final returned model may minimise some other loss.
The current state of the model is saved after each epoch, using \code{keras::callback_model_checkpoint}, if the value of some criterion subcedes that of the model from the previous checkpoint; this criterion is the loss evaluated for validation set \code{Y_valid} if \code{!is.null(Y_valid)} and for \code{Y_train}, otherwise.

}
}
\examples{


# Build and train a simple MLP for toy data

# Create 'nn', 'additive' and 'linear' predictors
X_train_nn<-rnorm(5000); X_train_add<-rnorm(2000); X_train_lin<-rnorm(3000)

#Re-shape to a 4d array. First dimension corresponds to observations,
#last to the different components of the predictor set
dim(X_train_nn)=c(10,10,10,5) #Five nn predictors
dim(X_train_lin)=c(10,10,10,3) #Three linear predictors
dim(X_train_add)=c(10,10,10,2) #Two additive predictors

# Create toy response data

#Linear contribution
m_L = 0.3*X_train_lin[,,,1]+0.6*X_train_lin[,,,2]-0.2*X_train_lin[,,,3]

# Additive contribution
m_A = 0.1*X_train_add[,,,1]^2+0.2*X_train_add[,,,1]-0.1*X_train_add[,,,2]^3+
0.5*X_train_add[,,,2]^2

#Non-additive contribution - to be estimated by NN
m_N = exp(-3+X_train_nn[,,,2]+X_train_nn[,,,3])+
sin(X_train_nn[,,,1]-X_train_nn[,,,2])*(X_train_nn[,,,4]+X_train_nn[,,,5])

theta=1+m_L+m_A+m_N #Identity link
#We simulate normal data and estimate the median, i.e., the 50\% quantile or mean,
#as the form for this is known
Y=apply(theta,1:3,function(x) rnorm(1,mean=x,sd=2))

#Create training and validation, respectively.
#We mask 20\% of the Y values and use this for validation.
#Masked values must be set to -1e5 and are treated as missing whilst training

mask_inds=sample(1:length(Y),size=length(Y)*0.8)

Y_train<-Y_valid<-Y #Create training and validation, respectively.
Y_train[-mask_inds]=-1e5
Y_valid[mask_inds]=-1e5



#To build a model with an additive component, we require an array of evaluations of
#the basis functions for each pre-specified knot and entry to X_train_add

rad=function(x,c){ #Define a basis function. Here we use the radial bases
  out=abs(x-c)^2*log(abs(x-c))
  out[(x-c)==0]=0
  return(out)
}

n.knot = 5 # set number of knots. Must be the same for each additive predictor
knots=matrix(nrow=dim(X_train_add)[4],ncol=n.knot)

#We set knots to be equally-spaced marginal quantiles
for( i in 1:dim(X_train_add)[4]) knots[i,]=quantile(X_train_add[,,,i],probs=seq(0,1,length=n.knot))

X_train_add_basis<-array(dim=c(dim(X_train_add),n.knot))
for( i in 1:dim(X_train_add)[4]) {
for(k in 1:n.knot) {
X_train_add_basis[,,,i,k]= rad(x=X_train_add[,,,i],c=knots[i,k])
#Evaluate rad at all entries to X_train_add and for all knots
}}

#Build lin+GAM+NN model.
X_train=list("X_train_nn"=X_train_nn, "X_train_lin"=X_train_lin,
"X_train_add_basis"=X_train_add_basis)

#Build and train a two-layered "lin+GAM+NN" MLP
model<-quant.NN.train(Y_train, Y_valid,X_train,  type="MLP",link="identity",tau=0.5,n.ep=50,
                      batch.size=50, widths=c(6,3))

out<-quant.NN.predict(X_train,model)
hist(out$predictions) #Plot histogram of predicted quantiles
print(out$lin.coeff)

n.add.preds=dim(X_train_add)[length(dim(X_train_add))]
par(mfrow=c(1,n.add.preds))
for(i in 1:n.add.preds){
 plt.x=seq(from=min(knots[i,]),to=max(knots[i,]),length=1000)  #Create sequence for x-axis

 tmp=matrix(nrow=length(plt.x),ncol=n.knot)
 for(j in 1:n.knot){
   tmp[,j]=rad(plt.x,knots[i,j]) #Evaluate radial basis function of plt.x and all knots
 }
 plt.y=tmp\%*\%out$gam.weights[i,]
 plot(plt.x,plt.y,type="l",main=paste0("Quantile spline: predictor ",i),xlab="x",ylab="f(x)")
 points(knots[i,],rep(mean(plt.y),n.knot),col="red",pch=2)
 #Adds red triangles that denote knot locations
}

tau <- 0.5
#To save model, run
# model \%>\% save_model_tf(paste0("model_",tau,"-quantile"))
#To load model, run
#model  <- load_model_tf(paste0("model_",tau,"-quantile"),
#custom_objects=list("tilted_loss_tau___tau_"=tilted_loss(tau)))

}
